// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// SendErrorLog mocks base method.
func (m *MockLog) SendErrorLog(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendErrorLog", ctx, err)
}

// SendErrorLog indicates an expected call of SendErrorLog.
func (mr *MockLogMockRecorder) SendErrorLog(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorLog", reflect.TypeOf((*MockLog)(nil).SendErrorLog), ctx, err)
}

// SendEvent mocks base method.
func (m *MockLog) SendEvent(ctx context.Context, eventCode int, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEvent", ctx, eventCode, message)
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockLogMockRecorder) SendEvent(ctx, eventCode, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockLog)(nil).SendEvent), ctx, eventCode, message)
}

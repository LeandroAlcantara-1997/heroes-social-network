// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/LeandroAlcantara-1997/heroes-social-network/internal/domain/team/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockTeam is a mock of Team interface.
type MockTeam struct {
	ctrl     *gomock.Controller
	recorder *MockTeamMockRecorder
}

// MockTeamMockRecorder is the mock recorder for MockTeam.
type MockTeamMockRecorder struct {
	mock *MockTeam
}

// NewMockTeam creates a new mock instance.
func NewMockTeam(ctrl *gomock.Controller) *MockTeam {
	mock := &MockTeam{ctrl: ctrl}
	mock.recorder = &MockTeamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeam) EXPECT() *MockTeamMockRecorder {
	return m.recorder
}

// DeleteTeamByID mocks base method.
func (m *MockTeam) DeleteTeamByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockTeamMockRecorder) DeleteTeamByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockTeam)(nil).DeleteTeamByID), ctx, id)
}

// GetTeamByID mocks base method.
func (m *MockTeam) GetTeamByID(ctx context.Context, id string) (*dto.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByID", ctx, id)
	ret0, _ := ret[0].(*dto.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByID indicates an expected call of GetTeamByID.
func (mr *MockTeamMockRecorder) GetTeamByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByID", reflect.TypeOf((*MockTeam)(nil).GetTeamByID), ctx, id)
}

// GetTeamByName mocks base method.
func (m *MockTeam) GetTeamByName(ctx context.Context, name *dto.GetTeamByName) (*dto.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByName", ctx, name)
	ret0, _ := ret[0].(*dto.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByName indicates an expected call of GetTeamByName.
func (mr *MockTeamMockRecorder) GetTeamByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByName", reflect.TypeOf((*MockTeam)(nil).GetTeamByName), ctx, name)
}

// RegisterTeam mocks base method.
func (m *MockTeam) RegisterTeam(ctx context.Context, request *dto.TeamRequest) (*dto.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTeam", ctx, request)
	ret0, _ := ret[0].(*dto.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTeam indicates an expected call of RegisterTeam.
func (mr *MockTeamMockRecorder) RegisterTeam(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTeam", reflect.TypeOf((*MockTeam)(nil).RegisterTeam), ctx, request)
}

// UpdateTeam mocks base method.
func (m *MockTeam) UpdateTeam(ctx context.Context, id string, request *dto.TeamRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamMockRecorder) UpdateTeam(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeam)(nil).UpdateTeam), ctx, id, request)
}

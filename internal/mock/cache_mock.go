// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LeandroAlcantara-1997/heroes-social-network/internal/domain/game/model"
	model0 "github.com/LeandroAlcantara-1997/heroes-social-network/internal/domain/hero/model"
	model1 "github.com/LeandroAlcantara-1997/heroes-social-network/internal/domain/team/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DeleteGame mocks base method.
func (m *MockCache) DeleteGame(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame.
func (mr *MockCacheMockRecorder) DeleteGame(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockCache)(nil).DeleteGame), ctx, key)
}

// DeleteHero mocks base method.
func (m *MockCache) DeleteHero(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHero", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHero indicates an expected call of DeleteHero.
func (mr *MockCacheMockRecorder) DeleteHero(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHero", reflect.TypeOf((*MockCache)(nil).DeleteHero), ctx, key)
}

// DeleteTeam mocks base method.
func (m *MockCache) DeleteTeam(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockCacheMockRecorder) DeleteTeam(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockCache)(nil).DeleteTeam), ctx, key)
}

// GetGame mocks base method.
func (m *MockCache) GetGame(ctx context.Context, key string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", ctx, key)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockCacheMockRecorder) GetGame(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockCache)(nil).GetGame), ctx, key)
}

// GetHero mocks base method.
func (m *MockCache) GetHero(ctx context.Context, key string) (*model0.Hero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHero", ctx, key)
	ret0, _ := ret[0].(*model0.Hero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHero indicates an expected call of GetHero.
func (mr *MockCacheMockRecorder) GetHero(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHero", reflect.TypeOf((*MockCache)(nil).GetHero), ctx, key)
}

// GetTeam mocks base method.
func (m *MockCache) GetTeam(ctx context.Context, key string) (*model1.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, key)
	ret0, _ := ret[0].(*model1.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockCacheMockRecorder) GetTeam(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockCache)(nil).GetTeam), ctx, key)
}

// SetGame mocks base method.
func (m *MockCache) SetGame(ctx context.Context, game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGame", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGame indicates an expected call of SetGame.
func (mr *MockCacheMockRecorder) SetGame(ctx, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGame", reflect.TypeOf((*MockCache)(nil).SetGame), ctx, game)
}

// SetHero mocks base method.
func (m *MockCache) SetHero(ctx context.Context, hero *model0.Hero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHero", ctx, hero)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHero indicates an expected call of SetHero.
func (mr *MockCacheMockRecorder) SetHero(ctx, hero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHero", reflect.TypeOf((*MockCache)(nil).SetHero), ctx, hero)
}

// SetTeam mocks base method.
func (m *MockCache) SetTeam(ctx context.Context, team *model1.Team, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTeam", ctx, team, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTeam indicates an expected call of SetTeam.
func (mr *MockCacheMockRecorder) SetTeam(ctx, team, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTeam", reflect.TypeOf((*MockCache)(nil).SetTeam), ctx, team, key)
}

// MockHeroCache is a mock of HeroCache interface.
type MockHeroCache struct {
	ctrl     *gomock.Controller
	recorder *MockHeroCacheMockRecorder
}

// MockHeroCacheMockRecorder is the mock recorder for MockHeroCache.
type MockHeroCacheMockRecorder struct {
	mock *MockHeroCache
}

// NewMockHeroCache creates a new mock instance.
func NewMockHeroCache(ctrl *gomock.Controller) *MockHeroCache {
	mock := &MockHeroCache{ctrl: ctrl}
	mock.recorder = &MockHeroCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeroCache) EXPECT() *MockHeroCacheMockRecorder {
	return m.recorder
}

// DeleteHero mocks base method.
func (m *MockHeroCache) DeleteHero(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHero", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHero indicates an expected call of DeleteHero.
func (mr *MockHeroCacheMockRecorder) DeleteHero(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHero", reflect.TypeOf((*MockHeroCache)(nil).DeleteHero), ctx, key)
}

// GetHero mocks base method.
func (m *MockHeroCache) GetHero(ctx context.Context, key string) (*model0.Hero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHero", ctx, key)
	ret0, _ := ret[0].(*model0.Hero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHero indicates an expected call of GetHero.
func (mr *MockHeroCacheMockRecorder) GetHero(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHero", reflect.TypeOf((*MockHeroCache)(nil).GetHero), ctx, key)
}

// SetHero mocks base method.
func (m *MockHeroCache) SetHero(ctx context.Context, hero *model0.Hero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHero", ctx, hero)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHero indicates an expected call of SetHero.
func (mr *MockHeroCacheMockRecorder) SetHero(ctx, hero interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHero", reflect.TypeOf((*MockHeroCache)(nil).SetHero), ctx, hero)
}

// MockTeamCache is a mock of TeamCache interface.
type MockTeamCache struct {
	ctrl     *gomock.Controller
	recorder *MockTeamCacheMockRecorder
}

// MockTeamCacheMockRecorder is the mock recorder for MockTeamCache.
type MockTeamCacheMockRecorder struct {
	mock *MockTeamCache
}

// NewMockTeamCache creates a new mock instance.
func NewMockTeamCache(ctrl *gomock.Controller) *MockTeamCache {
	mock := &MockTeamCache{ctrl: ctrl}
	mock.recorder = &MockTeamCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamCache) EXPECT() *MockTeamCacheMockRecorder {
	return m.recorder
}

// DeleteTeam mocks base method.
func (m *MockTeamCache) DeleteTeam(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamCacheMockRecorder) DeleteTeam(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamCache)(nil).DeleteTeam), ctx, key)
}

// GetTeam mocks base method.
func (m *MockTeamCache) GetTeam(ctx context.Context, key string) (*model1.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, key)
	ret0, _ := ret[0].(*model1.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamCacheMockRecorder) GetTeam(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamCache)(nil).GetTeam), ctx, key)
}

// SetTeam mocks base method.
func (m *MockTeamCache) SetTeam(ctx context.Context, team *model1.Team, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTeam", ctx, team, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTeam indicates an expected call of SetTeam.
func (mr *MockTeamCacheMockRecorder) SetTeam(ctx, team, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTeam", reflect.TypeOf((*MockTeamCache)(nil).SetTeam), ctx, team, key)
}

// MockGameCache is a mock of GameCache interface.
type MockGameCache struct {
	ctrl     *gomock.Controller
	recorder *MockGameCacheMockRecorder
}

// MockGameCacheMockRecorder is the mock recorder for MockGameCache.
type MockGameCacheMockRecorder struct {
	mock *MockGameCache
}

// NewMockGameCache creates a new mock instance.
func NewMockGameCache(ctrl *gomock.Controller) *MockGameCache {
	mock := &MockGameCache{ctrl: ctrl}
	mock.recorder = &MockGameCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameCache) EXPECT() *MockGameCacheMockRecorder {
	return m.recorder
}

// DeleteGame mocks base method.
func (m *MockGameCache) DeleteGame(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame.
func (mr *MockGameCacheMockRecorder) DeleteGame(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockGameCache)(nil).DeleteGame), ctx, key)
}

// GetGame mocks base method.
func (m *MockGameCache) GetGame(ctx context.Context, key string) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", ctx, key)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockGameCacheMockRecorder) GetGame(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockGameCache)(nil).GetGame), ctx, key)
}

// SetGame mocks base method.
func (m *MockGameCache) SetGame(ctx context.Context, game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGame", ctx, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGame indicates an expected call of SetGame.
func (mr *MockGameCacheMockRecorder) SetGame(ctx, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGame", reflect.TypeOf((*MockGameCache)(nil).SetGame), ctx, game)
}
